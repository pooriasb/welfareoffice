@using BehzistiMaskan.Core.Utility
@model BehzistiMaskan.ViewModels.ClientFormViewModel

@{
    var isEditMode = Model.Client.Id != 0;
    ViewBag.Title = isEditMode ? "ویرایش اطلاعات" : "مددجوی جدید";
    Layout = "../Shared/_LayoutPorto.cshtml";
    ViewBag.SelectedTabMenu = "EditBasic";
    ViewBag.OnlyRequestExemption = Model.Client.OnlyRequestExemption;
    ViewBag.IsRequestAnyExemption = Model.Client.IsRequestAnyExemption;

}

@if (!isEditMode)
{
    <header class="page-header">
        <h2>@ViewBag.Title</h2>

        <div class="right-wrapper pull-right">
            <ol class="breadcrumbs">
                <li>
                    <a href="@Url.Action("Index", "Dashboard")">
                        <i class="fa fa-home"></i>
                    </a>
                </li>
                <li>
                    <a href="@Url.Action("Index", "Client")">
                        مددجویان
                    </a>
                </li>
                <li><span>@ViewBag.Title</span></li>
            </ol>
        </div>
    </header>
}
else
{
    @Html.Partial("_EditClientHeaderPartial")
}
<!-- start: page -->
<div class="row" id="page">
    <div class="col-md-12">
        <div class="tabs tabs-primary">
            @if (isEditMode)
            {
                @Html.Partial("_EditClientTabMenuPartial")
            }
            else
            {
                <ul class="nav nav-tabs col-sm-3 col-xs-5">
                    <li class="active">
                        <a href="#EditBasicTab" data-toggle="tab" aria-expanded="True"><i class="fa fa-star"></i> اطلاعات اولیه</a>
                    </li>
                </ul>
            }
            <div class="tab-content">
                <div id="EditBasicTab" class="tab-pane active">
                    @using (Html.BeginForm("SaveBasic", "Client", FormMethod.Post, new { @class = "form form-bordered", @name = "clientEditFrom" }))
                    {
                        @Html.AntiForgeryToken()
                        @Html.ValidationSummary(true, "خطاهای زیر را برطرف نمایید.", new { @class = "alert alert-danger" })
                        <h4 class="text-primary">اطلاعات فردی</h4>
                        <hr />
                        <div class="row mb-sm">
                            <div class="col-md-3">
                                <div class="form-group">
                                    @Html.LabelFor(c => c.Client.Person.NationalCode, new { @class = "control-label" })
                                    @Html.TextBoxFor(c => c.Client.Person.NationalCode, new { @class = "form-control text-dir-ltr" })
                                    @Html.ValidationMessageFor(c => c.Client.Person.NationalCode)

                                </div>
                            </div>
                            <div class="col-md-3 mt-xlg">
                                <div class="checkbox">
                                    <label>@Html.CheckBoxFor(m => m.Client.Person.IsDisabled) مددجو معلول می باشد</label>
                                </div>
                            </div>
                        </div>
                        <div class="row mb-sm">
                            <div class="col-md-3">
                                <div class="form-group">
                                    @Html.LabelFor(c => c.Client.Person.Name, new { @class = "control-label" })
                                    @Html.TextBoxFor(c => c.Client.Person.Name, new { @class = "form-control" })
                                    @Html.ValidationMessageFor(c => c.Client.Person.Name)
                                </div>
                            </div>
                            <div class="col-md-3">
                                <div class="form-group">
                                    @Html.LabelFor(c => c.Client.Person.Family, new { @class = "control-label" })
                                    @Html.TextBoxFor(c => c.Client.Person.Family, new { @class = "form-control" })
                                    @Html.ValidationMessageFor(c => c.Client.Person.Family)
                                </div>
                            </div>
                            <div class="col-md-3">
                                <div class="form-group">
                                    @Html.LabelFor(c => c.Client.Person.FatherName, new { @class = "control-label" })
                                    @Html.TextBoxFor(c => c.Client.Person.FatherName, new { @class = "form-control" })
                                    @Html.ValidationMessageFor(c => c.Client.Person.FatherName)
                                </div>
                            </div>
                            <div class="col-md-3">
                                <div class="form-group">
                                    @Html.LabelFor(c => c.Client.Person.MotherName, new { @class = "control-label" })
                                    @Html.TextBoxFor(c => c.Client.Person.MotherName, new { @class = "form-control" })
                                    @Html.ValidationMessageFor(c => c.Client.Person.MotherName)
                                </div>
                            </div>
                        </div>
                        <div class="row mb-sm">
                            <div class="col-md-3">
                                <div class="form-group">
                                    @Html.LabelFor(c => c.Client.Person.Birthdate, new { @class = "control-label" })
                                    <div class="input-group">
                                        <div class="input-group-addon" data-mddatetimepicker="true" data-targetselector="#Client_Person_Birthdate" data-enabletimepicker="false" data-englishnumber="true" data-placement="top">
                                            <span class="glyphicon glyphicon-calendar"></span>
                                        </div>
                                        @Html.TextBoxFor(c => c.Client.Person.Birthdate, "{0:yyyy/M/d}",
                                            new Dictionary<string, Object>
                                          {
                                            {"class", "form-control text-dir-ltr"},
                                            {"data-mddatetimepicker", "true"},
                                            {"data-targetselector", "#Client_Person_Birthdate"},
                                            {"data-trigger", "focus"},
                                            {"data-enabletimepicker", "false"},
                                            {"data-englishnumber", "true"},
                                        })
                                    </div>
                                    @Html.ValidationMessageFor(c => c.Client.Person.Birthdate)
                                </div>
                            </div>
                            <div class="col-md-3">
                                <div class="form-group">
                                    @Html.LabelFor(c => c.Client.Person.GenderTypeId, new { @class = "control-label" })
                                    @Html.DropDownListFor(c => c.Client.Person.GenderTypeId, new SelectList(Model.GenderTypes, "Id", "Name"), "انتخاب کنید", new { @class = "form-control" })
                                    @Html.ValidationMessageFor(c => c.Client.Person.GenderTypeId)
                                </div>
                            </div>
                            <div class="col-md-3">
                                <div class="form-group">
                                    @Html.LabelFor(c => c.Client.Person.MarriageTypeId, new { @class = "control-label" })
                                    @Html.DropDownListFor(c => c.Client.Person.MarriageTypeId, new SelectList(Model.MarriageTypes, "Id", "Name"), "انتخاب کنید", new { @class = "form-control" })
                                    @Html.ValidationMessageFor(c => c.Client.Person.MarriageTypeId)
                                </div>
                            </div>
                            <div class="col-md-3">
                                <div class="form-group">
                                    @Html.LabelFor(c => c.Client.Person.NumberOfChildren, new { @class = "control-label" })
                                    @Html.TextBoxFor(c => c.Client.Person.NumberOfChildren, new { @class = "form-control text-left" })
                                    @Html.ValidationMessageFor(c => c.Client.Person.NumberOfChildren)

                                </div>
                            </div>
                        </div>
                        <div class="row mb-sm">
                            <div class="col-md-3">
                                <div class="form-group">
                                    @Html.LabelFor(c => c.Client.Person.BirthCertificateNo, new { @class = "control-label" })
                                    @Html.TextBoxFor(c => c.Client.Person.BirthCertificateNo, new { @class = "form-control text-left" })
                                    @Html.ValidationMessageFor(c => c.Client.Person.BirthCertificateNo)
                                </div>
                            </div>
                            <div class="col-md-3">
                                <div class="form-group">
                                    @Html.LabelFor(c => c.Client.Person.BirthCertificateMosalsal, new { @class = "control-label" })
                                    @Html.TextBoxFor(c => c.Client.Person.BirthCertificateMosalsal, new { @class = "form-control" })
                                    @Html.ValidationMessageFor(c => c.Client.Person.BirthCertificateMosalsal)
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-group">
                                    @Html.LabelFor(c => c.Client.Person.BirthCertificateDescription, new { @class = "" })
                                    @Html.TextBoxFor(c => c.Client.Person.BirthCertificateDescription, new { @class = "form-control" })
                                    @Html.ValidationMessageFor(c => c.Client.Person.BirthCertificateDescription)
                                </div>
                            </div>
                        </div>
                        <div class="row mb-sm">
                            <div class="col-md-3">
                                <div class="form-group">
                                    @Html.LabelFor(c => c.Client.Person.ProvinceOfBirthId, new { @class = "control-label" })
                                    @Html.DropDownListFor(c => c.Client.Person.ProvinceOfBirthId, new SelectList(Model.ProvinceOfBirth, "Id", "Name"), "انتخاب کنید", new { @class = "form-control" })
                                    @Html.ValidationMessageFor(c => c.Client.Person.ProvinceOfBirthId)
                                </div>
                            </div>
                            <div class="col-md-3">
                                <div class="form-group">
                                    @Html.LabelFor(c => c.Client.Person.CountyOfBirthId, new { @class = "control-label" })
                                    @Html.DropDownListFor(c => c.Client.Person.CountyOfBirthId, new SelectList(Model.CountyOfBirth, "Id", "Name"), "انتخاب کنید", new { @class = "form-control" })
                                    @Html.ValidationMessageFor(c => c.Client.Person.CountyOfBirthId)
                                </div>
                            </div>
                            <div class="col-md-3">
                                <div class="form-group">
                                    @Html.LabelFor(c => c.Client.Person.DistrictOfBirthId, new { @class = "control-label" })
                                    @Html.DropDownListFor(c => c.Client.Person.DistrictOfBirthId, new SelectList(Model.DistrictOfBirth, "Id", "Name"), "انتخاب کنید", new { @class = "form-control" })
                                    @Html.ValidationMessageFor(c => c.Client.Person.DistrictOfBirthId)
                                </div>
                            </div>
                            <div class="col-md-3">
                                <div class="form-group">
                                    @Html.LabelFor(c => c.Client.Person.CityOfBirthId, new { @class = "" })
                                    @Html.DropDownListFor(c => c.Client.Person.CityOfBirthId, new SelectList(Model.CityOfBirth, "Id", "Name"), "انتخاب کنید", new { @class = "form-control" })
                                    @Html.ValidationMessageFor(c => c.Client.Person.CityOfBirthId)
                                </div>
                            </div>
                        </div>
                        <h4 class="mt-xl text-primary">مشخصات پرونده بهزیستی</h4>
                        <hr />
                        <div class="row mb-sm">
                            <div class="col-md-3">
                                <div class="form-group">
                                    @Html.LabelFor(c => c.Client.CountyId, new { @class = "control-label" })
                                    @Html.DropDownListFor(c => c.Client.CountyId, new SelectList(Model.Counties, "Id", "Name"), "انتخاب کنید", new { @class = "form-control" })
                                    @Html.ValidationMessageFor(c => c.Client.CountyId)
                                </div>
                            </div>
                            <div class="col-md-3">
                                <div class="form-group">
                                    @Html.LabelFor(c => c.Client.DistrictId, new { @class = "control-label" })
                                    @Html.DropDownListFor(c => c.Client.DistrictId, new SelectList(Model.Districts, "Id", "Name"), "انتخاب کنید", new { @class = "form-control" })
                                    @Html.ValidationMessageFor(c => c.Client.DistrictId)
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-group">
                                    @Html.LabelFor(c => c.Client.CityId, new { @class = "" })
                                    @Html.DropDownListFor(c => c.Client.CityId, new SelectList(Model.Cities, "Id", "Name"), "انتخاب کنید", new { @class = "form-control" })
                                    @Html.ValidationMessageFor(c => c.Client.CityId)
                                </div>
                            </div>
                        </div>

                        <div class="row mb-sm">
                            <div class="col-md-3">
                                <div class="form-group">
                                    @Html.LabelFor(c => c.Client.AssistanceTypeId, new { @class = "control-label" })
                                    @Html.DropDownListFor(c => c.Client.AssistanceTypeId, new SelectList(Model.AssistanceTypes, "Id", "Name"), "انتخاب کنید", new { @class = "form-control" })
                                    @Html.ValidationMessageFor(c => c.Client.AssistanceTypeId)
                                </div>
                            </div>
                            <div class="col-md-3">
                                <div class="form-group">
                                    @Html.LabelFor(c => c.Client.ClientTypeId, new { @class = "control-label" })
                                    @Html.DropDownListFor(c => c.Client.ClientTypeId, new SelectList(Model.ClientTypes, "Id", "Name"), "انتخاب کنید", new { @class = "form-control" })
                                    @Html.ValidationMessageFor(c => c.Client.ClientTypeId)
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-group">
                                    @Html.LabelFor(c => c.Client.ClientTypeDescription, new { @class = "control-label" })
                                    @Html.TextBoxFor(c => c.Client.ClientTypeDescription, new { @class = "form-control" })
                                    @Html.ValidationMessageFor(c => c.Client.ClientTypeDescription)
                                </div>
                            </div>

                        </div>
                        <div class="row mb-sm">
                            <div class="col-md-3">
                                <div class="form-group">
                                    @Html.LabelFor(c => c.Client.BehzistiCode, new { @class = "control-label" })
                                    @Html.TextBoxFor(c => c.Client.BehzistiCode, new { @class = "form-control text-dir-ltr" })
                                    @Html.ValidationMessageFor(c => c.Client.BehzistiCode)
                                </div>
                            </div>
                            <div class="col-md-3">
                                <div class="form-group">
                                    @Html.LabelFor(c => c.Client.GlobalBehzistiUiCode, new { @class = "control-label" })
                                    @Html.TextBoxFor(c => c.Client.GlobalBehzistiUiCode, new { @class = "form-control text-dir-ltr" })
                                    @Html.ValidationMessageFor(c => c.Client.GlobalBehzistiUiCode)
                                </div>
                            </div>
                            <div class="col-md-3">
                                <div class="form-group">
                                    @Html.LabelFor(c => c.Client.NumberOfDisabledInFamily, new { @class = "control-label" })
                                    @Html.TextBoxFor(c => c.Client.NumberOfDisabledInFamily, new { @class = "form-control text-dir-ltr" })
                                    @Html.ValidationMessageFor(c => c.Client.NumberOfDisabledInFamily)
                                </div>
                            </div>
                            <div class="col-md-3 mt-lg">
                                <div class="checkbox">
                                    <label>
                                        @Html.CheckBoxFor(c => c.Client.IsHouseHold) آیا سرپرست خانوار می باشد؟
                                    </label>
                                </div>
                            </div>
                        </div>
                        <div class="panel-footer">
                            @Html.HiddenFor(c => c.Client.Id, new { @id = "clientIdHiddenMaskanTab" })
                            @Html.HiddenFor(c => c.Client.Person.Id, new { @id = "clientIdHiddenMaskanTab" })
                            <button class="btn btn-primary" id="saveClient" type="submit"><i class="fa fa-save"></i> ذخیره اطلاعات</button>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>
<!-- end: page -->

@section StyleSheet
{
    <link href="~/Assets/vendor/MdBootstrapPersianDateTimePicker/jquery.Bootstrap-PersianDateTimePicker.css" rel="stylesheet" />
}
@section Scripts{
    @Scripts.Render("~/bundles/jqueryval")
    <script>
        $(document).ready(function () {



            @if (Model.Status != null)
                        {
                            switch (Model.Status.StatusType)
                            {
                                case ModelEnums.StatusTypeE.Success:
                                    @Html.Raw("ShowNotifyStatus('اطلاعات با موفقیت ذخیره شد', 'success','عملیات موفق','fa fa-check');");
                                    break;
                                case ModelEnums.StatusTypeE.Error:
                        @Html.Raw("ShowNotifyStatus('ذخیره اطلاعات با خطا مواجه شده است!', 'error','عملیات ناموفق','fa fa-times');")
                                    break;
                                case ModelEnums.StatusTypeE.ValidationError:
                        @Html.Raw("ShowNotifyStatus('اطلاعات وارد شده در فرم اشتباه است!', 'error','عملیات ناموفق','fa fa-times');")
                                    break;
                                default:
                                    break;
                            }
                        }
            // #region اطلاعات اولیه

            // وقتی فرم نمایش داده شد اولین ورودی را انتخاب کنید
            $('div#page form').eq(0).find('input:visible').eq(0).select();

            // وقتی که کاربر دکمه اینتر رو میزنه نباید صفحه ذخیره بشه
            // برای زیبا تر شدن کار با وب سایت کلید اینتر عمل تب را انجام می دهد
            $('div#page form .form-control').keydown(function (event) { //event==Keyevent
                        if (event.which == 13) {
                        var inputs = $(this).closest('form').find(':visible.form-control');

                        if (inputs.index(this) == (inputs.length - 1))
                        $('div#page form button').eq(0).focus();
                    else
                            inputs.eq(inputs.index(this) + 1).focus();
                    event.preventDefault(); //Disable standard Enterkey action
                }
                // event.preventDefault(); <- Disable all keys  action
            });

            //کد های جاوااسکریپت مربوط به بخش اطلاعات اولیه
            //این کد ها مربوط به انتخاب مکان جغرافیایی محل تولد
            // و شهری است که مددجو در آن پرونده بهزیستی دارد
            var countyDropDown = $('#Client_CountyId');
            var districtDropDown = $('#Client_DistrictId');
            var cityDropDown = $('#Client_CityId');


            // CountyId Select Index Change
            countyDropDown.change(function () {
                var countyId = countyDropDown.val();
                if (countyId) {
                    $.getJSON("/api/counties/" + countyId + "/districts",
                        function (districts) {
                districtDropDown.children('option').remove();

                            $.each(districts,
                                function (i, district) {
                    districtDropDown.append(new Option(district.name, district.id));
                });
                districtDropDown.trigger('change');
            });
                } else {
                    //districtDropDown.children('option:not(:first)').remove();
                    districtDropDown.children('option').remove();
            districtDropDown.append('<option value="">انتخاب کنید</option>');
                    districtDropDown.trigger('change');
                }
            });

            // DistrictId Select Index Change
            districtDropDown.change(function () {
                var districtId = districtDropDown.val();
                if (districtId) {
                    $.getJSON("/api/districts/" + districtId + "/cities",
                        function (cities) {
                cityDropDown.children('option').remove();

                            $.each(cities,
                                function (key, city) {
                    cityDropDown.append(new Option(city.name, city.id));
                });
                cityDropDown.change();
            });
                } else {
                    cityDropDown.children('option').remove();
            cityDropDown.append('<option value="">انتخاب کنید</option>');
                    cityDropDown.change();
                }
            });

            var provinceOfBirthDropDown = $('#Client_Person_ProvinceOfBirthId');
            var countyOfBirthDropDown = $('#Client_Person_CountyOfBirthId');
            var districtOfBirthDropDown = $('#Client_Person_DistrictOfBirthId');
            var cityOfBirthDropDown = $('#Client_Person_CityOfBirthId');

            provinceOfBirthDropDown.change(function () {
                var provinceId = provinceOfBirthDropDown.val();
                if (provinceId) {
                    countyOfBirthDropDown.children('option').remove();

                    $.getJSON("/api/provinces/" + provinceId + "/counties",
                        function (counties) {
                            $.each(counties, function (key, county) {
                    countyOfBirthDropDown.append(new Option(county.name, county.id));
                });
                countyOfBirthDropDown.trigger('change');
            });
                } else {
                    countyOfBirthDropDown.children('option').remove();
            countyOfBirthDropDown.append('<option value="">انتخاب کنید</option>');
                    countyOfBirthDropDown.trigger('change');
                }
            });

            countyOfBirthDropDown.change(function () {
                var countyId = countyOfBirthDropDown.val();
                if (countyId) {
                    districtOfBirthDropDown.children('option').remove();

                    $.getJSON("/api/counties/" + countyId + "/districts",
                        function (districts) {
                            $.each(districts, function (key, district) {
                    districtOfBirthDropDown.append(new Option(district.name, district.id));
                });
                districtOfBirthDropDown.change();
            });
                } else {
                    districtOfBirthDropDown.children('option').remove();
            districtOfBirthDropDown.append('<option value="">انتخاب کنید</option>');
                    districtOfBirthDropDown.change();
                }
            });

            districtOfBirthDropDown.change(function () {
                var districtId = districtOfBirthDropDown.val();
                if (districtId) {
                    cityOfBirthDropDown.children('option').remove();

                    $.getJSON("/api/districts/" + districtId + "/cities",
                        function (cities) {
                            $.each(cities, function (key, city) {
                    cityOfBirthDropDown.append(new Option(city.name, city.id));
                });
                cityOfBirthDropDown.change();
            });
                } else {
                    cityOfBirthDropDown.children('option').remove();
            cityOfBirthDropDown.append('<option value="">انتخاب کنید</option>');
                    cityOfBirthDropDown.change();
                }
            });


            // بهتر کردن عملکرد تقویم که هنگام فوکس شدن روی تاریخ تولد باز می شود
            // باید وقتی که از روی تاریخ تولد رفتیم تقویم مخفی شود
            var personBirthdateInput = $('#Client_Person_Birthdate');

            personBirthdateInput.focusout(function () {
                personBirthdateInput.MdPersianDateTimePicker('hide');
            });
            //#endregion


        });
    </script>
}
